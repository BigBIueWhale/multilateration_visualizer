import { z } from 'zod';
import { AssertEqual, assertType } from '../util/assertTypeEquivalence';
import { FrameData, Voxel } from '../proto/grpc_api';

// Here we do code duplication of the ts-proto generated typescript types
// so that we get runtime type validation.
const VoxelSchema = z.object({
  color: z.string(),
  x: z.number(),
  y: z.number(),
  z: z.number(),
});
const FrameDataSchema = z.object({
  voxels: z.array(VoxelSchema),
});


// Here we validate those duplicated types to check that they're
// equal to the types that were generated by ts-proto, so that the
// gods of code duplication forgive us.
export type VoxelType = z.infer<typeof VoxelSchema>;
const voxelAssertion = assertType<AssertEqual<Voxel, VoxelType>>(true);
export type FrameDataType = z.infer<typeof FrameDataSchema>;
const frameDataAssertion = assertType<AssertEqual<FrameData, FrameDataType>>(true);

// Define the API using Zod schemas
export const apiSchemasServerToClient = {
  'notify-new-frame': {
    notification: FrameDataSchema,
  },
  'notify-grpc-stream-error': {
    notification: z.string(),
  },
  'notify-grpc-stream-end': {
    notification: z.object({}),
  }
};

// Infer types from Zod schemas
export type ApiServerToClient = {
  [K in keyof typeof apiSchemasServerToClient]: {
    notification: z.infer<typeof apiSchemasServerToClient[K]['notification']>;
  };
};

// Define Channels type for preload.ts
export type ChannelsServerToClient = keyof ApiServerToClient;
