syntax = "proto3";

package serialcomm;

// The Serial Communication service definition.
service SerialCommService {
    // Opens the specified serial port with provided settings.
    rpc OpenSerialPort (OpenPortRequest) returns (OpenPortResponse);

    // Closes the specified serial port.
    rpc CloseSerialPort (ClosePortRequest) returns (ClosePortResponse);

    // Sends data to the specified serial port synchronously.
    rpc WriteToSerial (WriteRequest) returns (WriteResponse);

    // Reads data from the specified serial port asynchronously.
    rpc ReadFromSerial (ReadRequest) returns (stream ReadResponse);

    // Listing available serial ports
    rpc ListAvailableSerialPorts (AvailableSerialPortsRequest) returns (AvailableSerialPortsResponse);
}

// Request message for opening a serial port.
message OpenPortRequest {
    string port = 1; // Serial port to open.
    int32 baud_rate = 2; // Baud rate for the serial port.
    // You can add more serial port settings as needed.
}

// Response message for opening a serial port.
message OpenPortResponse {
    bool success = 1; // Indicates if the open operation was successful.
    string error = 2; // Detailed error message, if any.
}

// Request message for closing a serial port.
message ClosePortRequest {
    string port = 1; // Serial port to close.
}

// Response message for closing a serial port.
message ClosePortResponse {
    bool success = 1; // Indicates if the close operation was successful.
    string error = 2; // Detailed error message, if any.
}

// Request message for writing to a serial port.
message WriteRequest {
    string data = 1; // Data to be sent.
}

// Response message for writing to a serial port.
message WriteResponse {
    bool success = 1; // Indicates if the write operation was successful.
    string error = 2; // Detailed error message, if any.
}

// Request message for reading from a serial port.
message ReadRequest {
    string port = 1; // Serial port to read from.
    int32 timeout = 2; // Timeout in milliseconds (optional).
}

// Response message for reading from a serial port.
message ReadResponse {
    string data = 1; // Data received from the serial port.
    string error = 2; // Detailed error message, if any.
}

// Request for listing available serial ports (empty as no parameters are needed)
message AvailableSerialPortsRequest {
}

// Response for listing available serial ports
message AvailableSerialPortsResponse {
    repeated string port_names = 1; // List of available serial port names
}
